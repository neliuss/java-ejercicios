
package interfaces;

import clases.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
//todos esos pueden ser java.sql.*
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

public class Panel extends javax.swing.JFrame {

    Connection connection=null;
    
    public Panel() {
        initComponents();
        setLocationRelativeTo(null);
        
        connection=Conexion.getConexion();
        if (connection!=null)
        {
        mostrarSociosTabla();  
        mostrarProyectosTabla();  
        mostrarCentrosTabla(); 
        }
        else
            JOptionPane.showMessageDialog(null, "Error al conectar", "Mensaje de error", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabelNombre = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableSocios = new javax.swing.JTable();
        jComboBoxID_socio = new javax.swing.JComboBox<>();
        Buscar1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableProyectos = new javax.swing.JTable();
        jPanelProyectos = new javax.swing.JPanel();
        jLabelID_proyecto = new javax.swing.JLabel();
        jLabelFinalizado = new javax.swing.JLabel();
        jLabelTitulo = new javax.swing.JLabel();
        jLabelFecha_entrega = new javax.swing.JLabel();
        jLabelDescripcion = new javax.swing.JLabel();
        jTextFieldFinalizado = new javax.swing.JTextField();
        jTextFieldTitulo = new javax.swing.JTextField();
        jTextFieldDescripcion = new javax.swing.JTextField();
        jDateChooserFecha_entrega = new com.toedter.calendar.JDateChooser();
        jButtonInsertar = new javax.swing.JButton();
        jTextFieldID_proyecto = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCentros = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabelNIF = new javax.swing.JLabel();
        jLabelDireccion = new javax.swing.JLabel();
        jComboBoxID_proyectoCentro = new javax.swing.JComboBox<>();
        jTextFieldDireccion = new javax.swing.JTextField();
        jLabelPais = new javax.swing.JLabel();
        jLabelID_proyectoCentro = new javax.swing.JLabel();
        jTextFieldPais = new javax.swing.JTextField();
        jComboBoxNIF = new javax.swing.JComboBox<>();
        jButtonModificar = new javax.swing.JButton();
        jButtonBorrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setForeground(new java.awt.Color(153, 255, 255));

        jLabelNombre.setText("id_socio");

        jTableSocios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID_Socio", "Nombre", "Apellidos", "Profesión", "Fecha_alta", "nif_centros"
            }
        ));
        jScrollPane3.setViewportView(jTableSocios);

        jComboBoxID_socio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        Buscar1.setText("Buscar");
        Buscar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Buscar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(jLabelNombre)
                        .addGap(56, 56, 56)
                        .addComponent(jComboBoxID_socio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(Buscar1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 216, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNombre)
                    .addComponent(jComboBoxID_socio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addComponent(Buscar1)
                .addGap(82, 82, 82))
        );

        jTabbedPane3.addTab("Socios", jPanel2);

        jTableProyectos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID_Proyecto", "Finalizado", "Título", "Fecha_entrega", "Descripción"
            }
        ));
        jScrollPane2.setViewportView(jTableProyectos);

        jLabelID_proyecto.setText("ID_Proyecto");

        jLabelFinalizado.setText("Finalizado");

        jLabelTitulo.setText("Título");

        jLabelFecha_entrega.setText("Fecha_entrega");

        jLabelDescripcion.setText("Descripción");

        jButtonInsertar.setText("Añadir Proyecto");
        jButtonInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertarActionPerformed(evt);
            }
        });

        jTextFieldID_proyecto.setText(" ");

        javax.swing.GroupLayout jPanelProyectosLayout = new javax.swing.GroupLayout(jPanelProyectos);
        jPanelProyectos.setLayout(jPanelProyectosLayout);
        jPanelProyectosLayout.setHorizontalGroup(
            jPanelProyectosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProyectosLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanelProyectosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelFinalizado)
                    .addComponent(jLabelTitulo)
                    .addComponent(jLabelDescripcion)
                    .addComponent(jLabelID_proyecto)
                    .addComponent(jLabelFecha_entrega))
                .addGap(26, 26, 26)
                .addGroup(jPanelProyectosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonInsertar)
                    .addComponent(jDateChooserFecha_entrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldFinalizado)
                    .addComponent(jTextFieldTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(jTextFieldDescripcion)
                    .addComponent(jTextFieldID_proyecto))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelProyectosLayout.setVerticalGroup(
            jPanelProyectosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelProyectosLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanelProyectosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelID_proyecto)
                    .addComponent(jTextFieldID_proyecto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProyectosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelFinalizado)
                    .addComponent(jTextFieldFinalizado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProyectosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelTitulo)
                    .addComponent(jTextFieldTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelProyectosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelFecha_entrega)
                    .addComponent(jDateChooserFecha_entrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelProyectosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDescripcion)
                    .addComponent(jTextFieldDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(jButtonInsertar)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanelProyectos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                .addComponent(jPanelProyectos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        jTabbedPane3.addTab("Proyectos", jPanel3);

        jPanel4.setForeground(new java.awt.Color(0, 204, 204));

        jTableCentros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "nif", "dirección", "país", "id_proyecto"
            }
        ));
        jScrollPane1.setViewportView(jTableCentros);

        jPanel1.setForeground(new java.awt.Color(0, 255, 255));

        jLabelNIF.setText("nif");

        jLabelDireccion.setText("dirección");

        jComboBoxID_proyectoCentro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabelPais.setText("país");

        jLabelID_proyectoCentro.setText("id_proyecto");

        jComboBoxNIF.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelDireccion)
                    .addComponent(jLabelPais)
                    .addComponent(jLabelID_proyectoCentro)
                    .addComponent(jLabelNIF, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxID_proyectoCentro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPais, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxNIF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelNIF)
                    .addComponent(jComboBoxNIF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDireccion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPais)
                    .addComponent(jTextFieldPais, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxID_proyectoCentro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelID_proyectoCentro))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jButtonModificar.setText("Modificar");
        jButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModificarActionPerformed(evt);
            }
        });

        jButtonBorrar.setText("Borrar");
        jButtonBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(jButtonModificar)
                .addGap(18, 18, 18)
                .addComponent(jButtonBorrar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 227, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonModificar)
                    .addComponent(jButtonBorrar)))
        );

        jTabbedPane3.addTab("Centros", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane3)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    public ArrayList<Socios> getListaSocios() {
        ArrayList<Socios> listaSocios = new ArrayList<>();
      
        String query = "SELECT * FROM socios";
           
        try {
            Statement st = connection.createStatement();
            ResultSet rs = st.executeQuery(query);
            jComboBoxID_socio.removeAllItems();    
            jComboBoxID_socio.addItem("Selecciona el ID del socio");
            Socios socio;
            while (rs.next()) {  
                socio = new Socios (rs.getString("ID_Socio"), rs.getString("Nombre"), rs.getString("fecha_alta"),
                        rs.getString("Apellidos"), rs.getString("Profesión"), rs.getString("nif_centros"));
                jComboBoxID_socio.addItem(rs.getString("ID_Socio"));
                listaSocios.add(socio);
                   }
            st.close();
            rs.close();
        } catch (SQLException e) {
            System.out.println(e);
        }

        return listaSocios;
    }
    
    public void mostrarSociosTabla() {
        ArrayList<Socios> listaSocios = getListaSocios();
        DefaultTableModel modelo = (DefaultTableModel) jTableSocios.getModel();
        
        modelo.setRowCount(0);
        Object col[] = new Object[6];
        
        for (int i = 0; i < listaSocios.size(); i++) {
            col[0] = listaSocios.get(i).getID_Socio();
            col[1] = listaSocios.get(i).getNombre();
            col[2] = listaSocios.get(i).getApellidos();
            col[3] = listaSocios.get(i).getProfesión();
            col[4] = listaSocios.get(i).getFecha_alta();
            col[5] = listaSocios.get(i).getNif_centros();
            
            modelo.addRow(col);
        }
    }
    
    public ArrayList<Proyectos> getListaProyectos() {
        ArrayList<Proyectos> listaProyectos = new ArrayList<>();
       
        String query = "SELECT * FROM proyectos";
        Statement st;
        ResultSet rs;
        
        try {
            st = connection.createStatement();
            rs = st.executeQuery(query);
            Proyectos proyectos;
            
            while (rs.next()) {     
                    proyectos = new Proyectos ( rs.getString("ID_Proyecto"),
                            rs.getString("Finalizado"), rs.getString("Título"),rs.getString ( "Fecha_entrega"),
                            rs.getString("Descripción"));
                listaProyectos.add(proyectos);
            }
            st.close();
            rs.close();   
        
        } catch (SQLException e) {
            System.out.println(e);
        }
        return listaProyectos;
    }
    
    
    public void mostrarProyectosTabla() {
        ArrayList<Proyectos> listaProyectos = getListaProyectos();
        DefaultTableModel modelo = (DefaultTableModel) jTableProyectos.getModel();
       
        modelo.setRowCount(0); //ponemos a cero las filas 
        Object col[] = new Object[5];
        
        for (int i = 0; i < listaProyectos.size(); i++) {

            col[0] = listaProyectos.get(i).getID_Proyecto();
            col[1] = listaProyectos.get(i).getFinalizado();
            col[2] = listaProyectos.get(i).getTítulo();
            col[3] = listaProyectos.get(i).getFecha_entrega();
            col[4] = listaProyectos.get(i).getDescripción();
            
            modelo.addRow(col);
        }
    }
    
    public void mostrarCentrosTabla() {
        ArrayList<Centros> listaCentros = getListaCentros();
        DefaultTableModel modelo = (DefaultTableModel) jTableCentros.getModel();
        
        modelo.setRowCount(0);
        Object col[] = new Object[4];
        
        for (int i = 0; i < listaCentros.size(); i++) {
            col[0] = listaCentros.get(i).getNif();
            col[1] = listaCentros.get(i).getDirección();
            col[2] = listaCentros.get(i).getPaís();
            col[3] = listaCentros.get(i).getId_proyecto();
            
            modelo.addRow(col);
        }
    }
    
    
    public ArrayList<Centros> getListaCentros() {
        ArrayList<Centros> listaCentros = new ArrayList<>();   
        
        String query = "SELECT * FROM centros";
        Statement st;
        ResultSet rs;
        
        try {
            st = connection.createStatement();
            rs = st.executeQuery(query);
            jComboBoxNIF.removeAllItems(); 
            jComboBoxNIF.addItem("Selecciona el nif del centro"); 
            jComboBoxID_proyectoCentro.removeAllItems(); 
            jComboBoxID_proyectoCentro.addItem("Selecciona el ID del proyecto");
            Centros centros;
            while (rs.next()) { //String nif, String dirección, String país, String id_proyecto
                centros = new Centros(rs.getString("nif"), rs.getString("dirección"), rs.getString("país"), rs.getString("id_proyecto"));
                jComboBoxNIF.addItem(rs.getString("nif")); 
                jComboBoxID_proyectoCentro.addItem(rs.getString("id_proyecto"));
                //aprovechamos para ir rellenando el combo
                listaCentros.add(centros);
            }
            st.close();
            rs.close();
        } catch (SQLException e) {
            System.out.println(e);
        }
        return listaCentros;
    }
   
    
    private void jTableProyectosMouseClicked(java.awt.event.MouseEvent evt) {                                               
        //al pinchar en la tabla y sobre la fecha me aparece en el DateChooser el valor actual
        Calendar calendario=Calendar.getInstance();
        SimpleDateFormat formato=new SimpleDateFormat("yyyy-MM-dd");
        try{
            String cadena=jTableProyectos.getValueAt(jTableProyectos.getSelectedRow(), jTableProyectos.getSelectedColumn()).toString();
            calendario.setTime(formato.parse(cadena));
            jDateChooserFecha_entrega.setDate(calendario.getTime());
        }
        catch(Exception e)
        {}
    }
    
    private void jScrollPane2MouseClicked(java.awt.event.MouseEvent evt) {                                          

    }
    
    public boolean comprobarCajasProyectos() {
        if (jTextFieldID_proyecto.getText().isEmpty() || jTextFieldFinalizado.getText().isEmpty() || jTextFieldDescripcion.getText().isEmpty() ||
            jDateChooserFecha_entrega.getDate() == null || jTextFieldTitulo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Uno o más campos están vacíos o son incorrectos", "Mensaje de error", JOptionPane.ERROR_MESSAGE);
            return false;
        
        } 
        return true;
    }
    
    
   public boolean comprobarCajasCentros() {
        if (jTextFieldDireccion.getText().isEmpty() || jTextFieldPais.getText().isEmpty()) 
            return false;
        else return true;
    }
   
  public void limpiarCajasProyectos() {
        jTextFieldFinalizado.setText("");
        jTextFieldDescripcion.setText("");
        jDateChooserFecha_entrega.setCalendar(null);
        jTextFieldTitulo.setText("");
        jComboBoxID_proyectoCentro.setSelectedIndex(0);
    }
   
   public void limpiarCajasCentros() {
        jTextFieldDireccion.setText(null); //con null o con ""
        jTextFieldPais.setText(null);

    }
   
   
   private void jTableCentrosMouseClicked(java.awt.event.MouseEvent evt) {                                              
        // TODO add your handling code here:
        int i = jTableCentros.getSelectedRow();
        TableModel modelo = jTableCentros.getModel();
        jTextFieldDireccion.setText(modelo.getValueAt(i, 0).toString());
        jTextFieldPais.setText(modelo.getValueAt(i, 1).toString());
    }  
   
    
    
    
    private void Buscar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Buscar1ActionPerformed

        try{
            //De esta forma si quisiésemos ponerle el nombre a las columnas:
            //  String buscarPrepared="select dni as 'DNI', nombre as 'NOMBRE', apellidos as 'APELLIDOS', direccion as 'DIRECCION', fecha_naci as 'FECHA NACIMIENTO' from personas where apellidos LIKE ?";
            String buscarPrepared="select * from socios where ID_Socio LIKE ?";
            PreparedStatement psB = connection.prepareStatement(buscarPrepared);

            psB.setString (1, (String) jComboBoxID_socio.getSelectedItem()+"%"); 

            //Aquí guardamos el resultado de la consulta
            ResultSet resultadoB=psB.executeQuery();//Crea tabla virtual, el resultset

            ResultSetMetaData resulMetaData = resultadoB.getMetaData(); //encabezado columna
            int col=resulMetaData.getColumnCount();//Contamos nº de columnas
            DefaultTableModel tablaSociosB = new DefaultTableModel();

            //De esta forma nos pone el nombre de las columnas igual al de la tabla:
            for (int i=1;i<=col;i++){
                tablaSociosB.addColumn(resulMetaData.getColumnLabel(i));
            }
            while(resultadoB.next()){
                String fila []=new String [col];
                for(int j=0;j<col;j++){
                    fila[j]=resultadoB.getString(j+1);
                }
                tablaSociosB.addRow(fila);
            }

            jTableSocios.setModel(tablaSociosB);
            psB.close();
            resultadoB.close();
        }catch (SQLException e){

            System.out.println("Fallo al conectar");
        }
        //se podría usar algo como:
        // DaoSocios.buscar_socios(connection,jTextField1.getText());
    }//GEN-LAST:event_Buscar1ActionPerformed

    private void jButtonInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertarActionPerformed
        try {               
            String consulta = "INSERT INTO proyectos (ID_Proyecto,Finalizado, Título,Fecha_entrega, Descripción ) VALUES (?,?,?,?,?)";
            PreparedStatement ps = connection.prepareStatement(consulta);

            if (comprobarCajasProyectos()) {
                ps.setString(1, jTextFieldID_proyecto.getText());
                ps.setString(2, jTextFieldFinalizado.getText());
                ps.setString(3, jTextFieldTitulo.getText());
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                String addDate = dateFormat.format(jDateChooserFecha_entrega.getDate());
               //ps.setString(3, addDate);
                //una forma de guardar la fecha tomándola como String o como tipo fecha, 
                //en el segundo caso hay que utilizar java.sql.Date para cambiar de tipo Date a sql.date 
                ps.setDate(4, java.sql.Date.valueOf(addDate));                
                ps.setString(5, jTextFieldDescripcion.getText());
                ps.executeUpdate();
                
                mostrarProyectosTabla();
                JOptionPane.showMessageDialog(null, "Operación insertada");
                limpiarCajasProyectos();
            }
            ps.close();
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Error al insertar", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonInsertarActionPerformed

    private void jButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModificarActionPerformed
        // TODO add your handling code here:
        if (comprobarCajasCentros() && !jComboBoxNIF.getSelectedItem().equals("")) {
            
            try {
                String consulta = "UPDATE centros SET nif=?, dirección=?, país=?, id_proyecto=? WHERE nif=?";
                PreparedStatement ps = connection.prepareStatement(consulta);

                ps.setString(1, (String) jComboBoxNIF.getSelectedItem());  
                ps.setString(2, jTextFieldDireccion.getText());   
                ps.setString(3, jTextFieldPais.getText());    
                ps.setString(4, (String) jComboBoxID_proyectoCentro.getSelectedItem());
                ps.setString(5, (String) jComboBoxNIF.getSelectedItem());
                ps.executeUpdate();

                mostrarCentrosTabla();
                JOptionPane.showMessageDialog(null, "Centro actualizado");
                limpiarCajasCentros();
                ps.close();
            } catch (SQLException e) {

                JOptionPane.showMessageDialog(null, "Centro no actualizado", "Mensaje de error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Uno o más campos están vacíos o son incorrectos", "Mensaje de error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonModificarActionPerformed

    private void jButtonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBorrarActionPerformed
        if (!  jComboBoxNIF.getSelectedItem().equals("")) {                      
            try {
                String consulta = "DELETE FROM centros WHERE nif = ?";
                PreparedStatement ps = connection.prepareStatement(consulta);
                int id = Integer.parseInt((String)jComboBoxNIF.getSelectedItem());
                ps.setInt(1, id);
                ps.executeUpdate();

                mostrarCentrosTabla();
                JOptionPane.showMessageDialog(null, "Centro eliminado");
                limpiarCajasCentros();
                ps.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Centro no eliminado", "Mensaje de error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Centro no eliminado : No hay nif para borrar", "Mensaje de error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonBorrarActionPerformed


    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Panel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Panel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Buscar1;
    private javax.swing.JButton jButtonBorrar;
    private javax.swing.JButton jButtonInsertar;
    private javax.swing.JButton jButtonModificar;
    private javax.swing.JComboBox<String> jComboBoxID_proyectoCentro;
    private javax.swing.JComboBox<String> jComboBoxID_socio;
    private javax.swing.JComboBox<String> jComboBoxNIF;
    private com.toedter.calendar.JDateChooser jDateChooserFecha_entrega;
    private javax.swing.JLabel jLabelDescripcion;
    private javax.swing.JLabel jLabelDireccion;
    private javax.swing.JLabel jLabelFecha_entrega;
    private javax.swing.JLabel jLabelFinalizado;
    private javax.swing.JLabel jLabelID_proyecto;
    private javax.swing.JLabel jLabelID_proyectoCentro;
    private javax.swing.JLabel jLabelNIF;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JLabel jLabelPais;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelProyectos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTable jTableCentros;
    private javax.swing.JTable jTableProyectos;
    private javax.swing.JTable jTableSocios;
    private javax.swing.JTextField jTextFieldDescripcion;
    private javax.swing.JTextField jTextFieldDireccion;
    private javax.swing.JTextField jTextFieldFinalizado;
    private javax.swing.JTextField jTextFieldID_proyecto;
    private javax.swing.JTextField jTextFieldPais;
    private javax.swing.JTextField jTextFieldTitulo;
    // End of variables declaration//GEN-END:variables
}
